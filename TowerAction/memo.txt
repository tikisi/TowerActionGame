重力を常にかける（キャラごとに異なる）
垂直抗力（位置を戻す）

class Physics {
	Point size;
	pos
	speed
	accel
	deque<Function> list;

	isSky // 空中にいるかどうか？
	// posを計算
	void update() {
		accel = 0;

		for (list)

		accel += gravity;
		speed += accel;
		pos += speed;
	}

	void push_back();

	void ぶつかったとき{
		speed = 0;
		pos 修正
	}
}


Moveマネージャー

加速度のみを0初期化
加算　変更ではなく加算（加速度）
速度、座標計算
当たり判定（速度、位置を変更）

速度０初期化
	- →キーで速度加算を採用できる
		〇キーを離したとき、逆方向に加速度をかける
	- 前フレームの速度を保持できない
		ジャンプ、落下で問題

ジャンプ終了判定
空中にいるか？

/*------------------------------------------
関数オブジェクト
- MoveManagerでupdateに関数オブジェクトをpush_back
- (Vec2 &accel)[=] -> {};
- なぜ関数？
	アニメーションは同時に一つのみ、物理は一つ以上
	関数を一度生成すると削除されるまで実行され続ける
	加算でなくVec2参照渡し
		強制上書き


player状態遷移
StateTransition;
押した瞬間、離した瞬間


関数オブジェクト（非FSMアクショントリガー管理）
	押されたキーに基づいてキューに関数を追加して処理
	アニメーションは？
		アクションに優先度をつける
		優先度が被った場合はSTAND
	ジャンプ中にノックバックは？
		スタックされたメソッドをすべて削除
	入力が変わっても状態が変わらないパターン
		ジャンプ中に→キー

ジャンプ中＋キーを離す
	ミーリーマシン
ジャンプ　キーを離す　→　弱ジャンプ状態
	ムーアマシン

アクションに優先度をつける
	ジャンプとWALKは同じ優先度
		動作優先順位とアニメーション優先順位
	優先度が高いアクションが来たらキュー内のアクションをすべて削除

ジャンプ中にジャンプを押された場合に関数の比較が必要になる
std::function<>()
------------------------------------------------------*/

FSM(Finite State Machine)で管理
	アニメーション変数とアクション変数で分離
	StatePattern update drawのそれぞれの戻り値は
		加速度とテキスチャ






